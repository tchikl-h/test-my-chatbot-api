version: "3.5"

services:
  test_my_chatbot_db_staging:
    container_name: staging.db.test-my-chatbot.com
    image: postgres
    environment:
      POSTGRES_DB: ${DB_NAME}
      POSTGRES_USER: ${DB_USER}
      POSTGRES_PASSWORD: ${DB_PASS}
    volumes:
       - /var/lib/postgresql/${POSTGRES_VERSION}/main:/src/postgresql
    ports:
      - "5431:5432"
    networks:
      - default
    restart: always

  test_my_chatbot_api_staging:
    build:
      context: .
      dockerfile: Dockerfile-staging
    depends_on:
      - "test_my_chatbot_db_staging"
    container_name: staging.api.test-my-chatbot.com
    restart: on-failure
    volumes:
       - ${REPO_PATH}:/src
       - /var/run/docker.sock:/var/run/docker.sock
    ports:
      - "3003:8080"
    command: bash -c "npm install && npm run build && ./node_modules/sequelize-cli-typescript/lib/sequelize db:migrate:undo:all && ./node_modules/sequelize-cli-typescript/lib/sequelize db:migrate && ./node_modules/sequelize-cli-typescript/lib/sequelize db:seed:all && npm run start" # sequelize db:migrate:undo:all && sequelize db:migrate && sequelize db:seed:all && npm run start ||| npm install && npm run build && ./node_modules/sequelize-cli-typescript/lib/sequelize db:migrate:undo:all && ./node_modules/sequelize-cli-typescript/lib/sequelize db:migrate && ./node_modules/sequelize-cli-typescript/lib/sequelize db:seed:all && npm run start
    environment:
      - VIRTUAL_HOST=staging.api.test-my-chatbot.com
      - LETSENCRYPT_HOST=staging.api.test-my-chatbot.com
      - LETSENCRYPT_EMAIL=herve.tchikladze@epitech.eu
      - NODE_ENV=staging
      - HOST=https://staging.dashboard.test-my-chatbot.com
    networks:
      - default

networks:
  default:
    external:
      name: webproxy
